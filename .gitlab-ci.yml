variables:
  DOCKER_HOST: "unix:///var/run/docker.sock"
  DOCKER_DRIVER: overlay2
  DS_NETWORK_NAME: ds-dev
  DOCKER_TLS_CERTDIR: ""

stages:
  - build
  - deploy

image: docker:stable

build:
  stage: build
  tags:
    - gitlab
  services:
    - name: docker:dind
      command: ['--tls=false', '--host=tcp://0.0.0.0:2375']
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ''
    DOCKER_BUILDKIT: '1'
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
      --tag $CI_REGISTRY_IMAGE:latest
      --build-arg BUILDKIT_INLINE_CACHE=1
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: always

deploy:
  stage: deploy
  tags:
    - prod
  variables:
     DOCKER_HOST: "unix:///var/run/docker.sock"
  script:
    - docker network create $DS_NETWORK_NAME || true
    - docker rm -f whispertritonserving || true
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID  
    - docker stop ls-ml-whisper-triton
    - docker rm ls-ml-whisper-triton  
    - docker run 
      -d
      --shm-size 8G
      --gpus all
      --name $CI_PROJECT_NAME
      --network $DS_NETWORK_NAME
      -p 8222:8085
      $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_COMMIT_BRANCH != "main"
      when: manual
